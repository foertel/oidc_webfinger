name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  TARGET_PLATFORMS: linux/amd64,linux/arm64
  REGISTRY: ghcr.io
  TAG_TEST: ${{ github.repository }}:test
  TAG_LATEST: ${{ github.repository }}:latest

jobs:

  build:

    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: ${{ env.TAG_TEST }}
      
      - name: Test
        timeout-minutes: 1
        run: |
          docker run -d --name webfinger -e OIDC_ISSUER_URL="https://example.org/" -p 80:80 ${{ env.TAG_TEST }}
          while [ "`docker inspect -f {{.State.Health.Status}} webfinger`" != "healthy" ]; do sleep 1; done
          curl -s http://localhost/.well-known/webfinger?resource=acct:example@example.org > /tmp/curl.txt && diff /tmp/curl.txt test/example-response.json || exit 1

      - name: 'Login to GitHub Container Registry'
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: Build and push
        if: github.event_name == 'push'
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.TAG_LATEST }}
    
  dependabot:
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' }}
    needs: build
    permissions:
      pull-requests: write
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v1
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
      - name: Approve a PR
        run: gh pr review --approve "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}